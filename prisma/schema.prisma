generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id                    String          @id @default(uuid()) @db.Uuid
  userId                String          @unique @db.Uuid
  role                  Role            @default(field_agent)
  email                 String?         @unique
  name                  String?
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  phone                 String?         @unique
  warehouseId           String?         @db.Uuid
  Driver                Driver?
  warehouse             Warehouse?      @relation(fields: [warehouseId], references: [id])
  coordinatedTransports TransportTask[] @relation("TransportCoordinator")

  @@index([warehouseId])
}

model Warehouse {
  id          String      @id @default(uuid()) @db.Uuid
  name        String
  code        String      @unique
  address     String?
  city        String?
  country     String?
  capacity    Int?
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdBy   String      @db.Uuid
  managers    Profile[]
  cropBatches CropBatch[]
}

model UnitOfMeasurement {
  id               String   @id @default(uuid()) @db.Uuid
  name             String
  code             String   @unique
  category         String
  baseUnit         String?
  conversionFactor Float?
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  createdBy        String   @db.Uuid
}

model ActivityLog {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String   @db.Uuid
  action     String
  entityType String?
  entityId   String?  @db.Uuid
  details    Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
}

model Farmer {
  id           String      @id @default(uuid()) @db.Uuid
  name         String
  email        String?     @unique
  phone        String?
  address      String?
  city         String?
  state        String?
  country      String?
  farmerId     String      @unique
  registeredBy String      @db.Uuid
  isActive     Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  cropBatches  CropBatch[]
  farms        Farm[]
}

model Farm {
  id           String           @id @default(uuid()) @db.Uuid
  name         String
  farmCode     String           @unique
  farmerId     String           @db.Uuid
  location     String?
  coordinates  String?
  area         Float?
  soilType     String?
  isActive     Boolean          @default(true)
  registeredBy String           @db.Uuid
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  cropBatches  CropBatch[]
  farmer       Farmer           @relation(fields: [farmerId], references: [id])
  inspections  FarmInspection[]
}

model CropBatch {
  id              String                @id @default(uuid()) @db.Uuid
  batchCode       String                @unique
  cropType        String
  variety         String?
  plantingDate    DateTime?
  expectedHarvest DateTime?
  actualHarvest   DateTime?
  quantity        Float?
  unit            String?
  farmId          String                @db.Uuid
  farmerId        String                @db.Uuid
  warehouseId     String?               @db.Uuid
  status          CropBatchStatus       @default(PLANTED)
  qrCode          String?               @unique
  notes           String?
  createdBy       String                @db.Uuid
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  farm            Farm                  @relation(fields: [farmId], references: [id])
  farmer          Farmer                @relation(fields: [farmerId], references: [id])
  warehouse       Warehouse?            @relation(fields: [warehouseId], references: [id])
  notifications   HarvestNotification[]
  transportTasks  TransportTask[]

  @@index([warehouseId])
}

model FarmInspection {
  id              String           @id @default(uuid()) @db.Uuid
  farmId          String           @db.Uuid
  inspectedBy     String           @db.Uuid
  inspectionDate  DateTime
  cropCondition   String?
  soilHealth      String?
  pestIssues      String?
  recommendations String?
  photos          String[]
  status          InspectionStatus @default(COMPLETED)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  farm            Farm             @relation(fields: [farmId], references: [id])
}

model HarvestNotification {
  id               String           @id @default(uuid()) @db.Uuid
  cropBatchId      String           @db.Uuid
  message          String
  notificationType NotificationType @default(HARVEST_READY)
  isRead           Boolean          @default(false)
  sentTo           String           @db.Uuid
  createdAt        DateTime         @default(now())
  cropBatch        CropBatch        @relation(fields: [cropBatchId], references: [id])
}

model Vehicle {
  id             String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  plateNumber    String          @unique
  type           VehicleType
  capacity       Float
  status         VehicleStatus   @default(AVAILABLE)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  transportTasks TransportTask[]
}

model Driver {
  id             String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String
  licenseNumber  String          @unique
  phone          String
  email          String?
  status         DriverStatus    @default(AVAILABLE)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  profileId      String?         @unique @db.Uuid
  Profile        Profile?        @relation(fields: [profileId], references: [id], onUpdate: NoAction)
  transportTasks TransportTask[]
}

model TransportTask {
  id                 String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  cropBatchId        String           @db.Uuid
  vehicleId          String           @db.Uuid
  driverId           String           @db.Uuid
  coordinatorId      String           @db.Uuid
  pickupLocation     String
  deliveryLocation   String
  scheduledDate      DateTime
  actualPickupDate   DateTime?
  actualDeliveryDate DateTime?
  status             TransportStatus  @default(SCHEDULED)
  notes              String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  issues             TransportIssue[]
  coordinator        Profile          @relation("TransportCoordinator", fields: [coordinatorId], references: [id])
  cropBatch          CropBatch        @relation(fields: [cropBatchId], references: [id])
  driver             Driver           @relation(fields: [driverId], references: [id])
  vehicle            Vehicle          @relation(fields: [vehicleId], references: [id])
}

model TransportIssue {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  transportTaskId String        @db.Uuid
  issueType       IssueType
  description     String
  status          IssueStatus   @default(OPEN)
  reportedAt      DateTime      @default(now())
  resolvedAt      DateTime?
  resolution      String?
  transportTask   TransportTask @relation(fields: [transportTaskId], references: [id])
}

enum Role {
  admin
  manager
  field_agent
  procurement_officer
  warehouse_manager
  transport_driver
  transport_coordinator
}

enum CropBatchStatus {
  PLANTED
  GROWING
  READY_FOR_HARVEST
  HARVESTED
  PROCESSED
  SHIPPED
  READY_FOR_PACKAGING
  PACKAGING
  PACKAGED
  RECEIVED
  STORED
}

enum InspectionStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum NotificationType {
  HARVEST_READY
  INSPECTION_DUE
  PEST_ALERT
  WEATHER_WARNING
  GENERAL
}

enum VehicleType {
  TRUCK
  VAN
  PICKUP
  REFRIGERATED_TRUCK
  CONTAINER_TRUCK
}

enum VehicleStatus {
  AVAILABLE
  IN_USE
  MAINTENANCE
  OUT_OF_SERVICE
}

enum DriverStatus {
  AVAILABLE
  ON_DUTY
  OFF_DUTY
  SICK_LEAVE
}

enum TransportStatus {
  SCHEDULED
  IN_TRANSIT
  DELIVERED
  CANCELLED
  DELAYED
}

enum IssueType {
  VEHICLE_BREAKDOWN
  TRAFFIC_DELAY
  WEATHER_DELAY
  DAMAGED_GOODS
  ROUTE_CHANGE
  OTHER
}

enum IssueStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  ESCALATED
}
