// Field Agent Models for Supply Chain Management

model Farmer {
  id            String   @id @default(uuid()) @db.Uuid
  name          String
  email         String?  @unique
  phone         String?
  address       String?
  city          String?
  state         String?
  country       String?
  farmerId      String   @unique // Farmer identification number
  registeredBy  String   @db.Uuid // Field agent who registered
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  farms         Farm[]
  cropBatches   CropBatch[]
  
  @@map("farmers")
}

model Farm {
  id            String   @id @default(uuid()) @db.Uuid
  name          String
  farmCode      String   @unique
  farmerId      String   @db.Uuid
  location      String?
  coordinates   String?  // GPS coordinates
  area          Float?   // in hectares
  soilType      String?
  isActive      Boolean  @default(true)
  registeredBy  String   @db.Uuid // Field agent who registered
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  farmer        Farmer     @relation(fields: [farmerId], references: [id])
  cropBatches   CropBatch[]
  inspections   FarmInspection[]
  
  @@map("farms")
}

model CropBatch {
  id              String   @id @default(uuid()) @db.Uuid
  batchCode       String   @unique
  cropType        String
  variety         String?
  plantingDate    DateTime?
  expectedHarvest DateTime?
  actualHarvest   DateTime?
  quantity        Float?
  unit            String?
  farmId          String   @db.Uuid
  farmerId        String   @db.Uuid
  status          CropBatchStatus @default(PLANTED)
  qrCode          String?  @unique
  notes           String?
  createdBy       String   @db.Uuid // Field agent
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  farm            Farm     @relation(fields: [farmId], references: [id])
  farmer          Farmer   @relation(fields: [farmerId], references: [id])
  notifications   HarvestNotification[]
  
  @@map("crop_batches")
}

model FarmInspection {
  id            String   @id @default(uuid()) @db.Uuid
  farmId        String   @db.Uuid
  inspectedBy   String   @db.Uuid // Field agent
  inspectionDate DateTime
  cropCondition String?
  soilHealth    String?
  pestIssues    String?
  recommendations String?
  photos        String[] // Array of photo URLs
  status        InspectionStatus @default(COMPLETED)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  farm          Farm     @relation(fields: [farmId], references: [id])
  
  @@map("farm_inspections")
}

model HarvestNotification {
  id            String   @id @default(uuid()) @db.Uuid
  cropBatchId   String   @db.Uuid
  message       String
  notificationType NotificationType @default(HARVEST_READY)
  isRead        Boolean  @default(false)
  sentTo        String   @db.Uuid // Field agent
  createdAt     DateTime @default(now())
  
  // Relations
  cropBatch     CropBatch @relation(fields: [cropBatchId], references: [id])
  
  @@map("harvest_notifications")
}

enum CropBatchStatus {
  PLANTED
  GROWING
  READY_FOR_HARVEST
  HARVESTED
  PROCESSED
  SHIPPED
  READY_FOR_PACKAGING
  PACKAGING
  PACKAGED
  RECEIVED
  STORED
}

enum InspectionStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum NotificationType {
  HARVEST_READY
  INSPECTION_DUE
  PEST_ALERT
  WEATHER_WARNING
  GENERAL
}
